import{g as d}from"./utils-BLWznkn2.js";const l=(o,n,t)=>{const e=new SimplePeer({initiator:n==="streamer",trickle:!1});return e.on("signal",r=>{t(r)}),e.on("stream",r=>{{const i=document.getElementById("video");i.srcObject=r}}),e.on("error",r=>{console.error("Peer Error:",r)}),e};let c,s;const a=crypto.randomUUID();document.getElementById("joinStream").onclick=()=>{const o=document.getElementById("streamId").value;s&&s.close(),s=new WebSocket(`${d()}?role=viewer&streamId=${o}&viewerId=${a}`),s.onopen=()=>{s.send(JSON.stringify({viewer:!0,type:"addViewer",streamId:o,viewerId:a}))};const n=t=>{const e=JSON.parse(t);if(e.streamer)switch(e.type){case"signal":{c=l(o,"viewer",r=>{s.send(JSON.stringify({viewer:!0,type:"signal",streamId:o,viewerId:a,data:r}))}),c.signal(e.data);break}}};s.onmessage=async t=>{if(t.data instanceof Blob){const e=await t.data.text();n(e)}else n(t.data)},s.onclose=()=>{console.log("WebSocket connection closed")},s.onerror=t=>{console.error("WebSocket error:",t)}};fetch("/streams").then(o=>o.json()).then(o=>{const n=o.streams,t=document.getElementById("streamList");n.forEach(e=>{const r=document.createElement("li");r.textContent=e,t.appendChild(r)})});
